# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_msgs/RAWIMU.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_msgs.msg

class RAWIMU(genpy.Message):
  _md5sum = "1994bb1ea664fad223f16baa26d93754"
  _type = "novatel_msgs/RAWIMU"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# message 268
novatel_msgs/CommonHeader header

int32 week
float64 gpssec

char[4] status

int32 accz
int32 accy_neg
int32 accx

int32 gyrz
int32 gyry_neg
int32 gyrx

================================================================================
MSG: novatel_msgs/CommonHeader
# On the wire, this header is preceeded by three sync bytes,
# which are 0xAA 0x44 0x12, and a uint8 which is the header length.

# Message ID of the log being output.
uint16 id

# Measurement source, format, response bit.
uint8 msg_type

uint8 port_addr
uint16 length
uint16 sequence

uint8 idle_time
uint8 time_status

uint16 gps_week
uint32 gps_week_milliseconds

# Table 3 in the SPAN on OEM6 manual.
# See: http://www.novatel.com/assets/Documents/Manuals/OM-20000144UM.pdf#page=13
uint32 receiver_status
uint32 RECEIVER_STATUS_ERROR=1
uint32 RECEIVER_STATUS_TEMPERATURE_WARNING=2
uint32 RECEIVER_STATUS_VOLTAGE_SUPPLY_WARNING=4
uint32 RECEIVER_STATUS_ANTENNA_UNPOWERED=8
uint32 RECEIVER_STATUS_LNA_FAILURE=16
uint32 RECEIVER_STATUS_ANTENNA_OPEN=32
uint32 RECEIVER_STATUS_ANTENNA_SHORTED=64
uint32 RECEIVER_STATUS_CPU_OVERLOADED=128
uint32 RECEIVER_STATUS_COM1_BUFFER_OVERRUN=256
uint32 RECEIVER_STATUS_COM2_BUFFER_OVERRUN=512
uint32 RECEIVER_STATUS_COM3_BUFFER_OVERRUN=1024
uint32 RECEIVER_STATUS_LINK_OVERLOAD=2048
uint32 RECEIVER_STATUS_AUX_TRANSMIT_OVERRUN=8192
uint32 RECEIVER_STATUS_AGC_OUT_OF_RANGE=16384
uint32 RECEIVER_STATUS_INS_RESET=65536
uint32 RECEIVER_STATUS_ALMANAC_INVALID=262144
uint32 RECEIVER_STATUS_POSITION_SOLUTION_INVALID=524288
uint32 RECEIVER_STATUS_POSITION_NOT_FIXED=1048576
uint32 RECEIVER_STATUS_CLOCK_STEERING_DISABLED=2097152
uint32 RECEIVER_STATUS_CLOCK_MODEL_INVALID=4194304
uint32 RECEIVER_STATUS_EXTERNAL_OSCILLATOR_LOCKED=8388608
uint32 RECEIVER_STATUS_SOFTWARE_RESOURCE_WARNING=16777216
uint32 RECEIVER_STATUS_AUXILIARY3_EVENT=536870912
uint32 RECEIVER_STATUS_AUXILIARY2_EVENT=1073741824
uint32 RECEIVER_STATUS_AUXILIARY1_EVENT=2147483648

uint16 reserved
uint16 software_version

"""
  __slots__ = ['header','week','gpssec','status','accz','accy_neg','accx','gyrz','gyry_neg','gyrx']
  _slot_types = ['novatel_msgs/CommonHeader','int32','float64','char[4]','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,week,gpssec,status,accz,accy_neg,accx,gyrz,gyry_neg,gyrx

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RAWIMU, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = novatel_msgs.msg.CommonHeader()
      if self.week is None:
        self.week = 0
      if self.gpssec is None:
        self.gpssec = 0.
      if self.status is None:
        self.status = chr(0)*4
      if self.accz is None:
        self.accz = 0
      if self.accy_neg is None:
        self.accy_neg = 0
      if self.accx is None:
        self.accx = 0
      if self.gyrz is None:
        self.gyrz = 0
      if self.gyry_neg is None:
        self.gyry_neg = 0
      if self.gyrx is None:
        self.gyrx = 0
    else:
      self.header = novatel_msgs.msg.CommonHeader()
      self.week = 0
      self.gpssec = 0.
      self.status = chr(0)*4
      self.accz = 0
      self.accy_neg = 0
      self.accx = 0
      self.gyrz = 0
      self.gyry_neg = 0
      self.gyrx = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_H2B2H2BH2I2Hid.pack(_x.header.id, _x.header.msg_type, _x.header.port_addr, _x.header.length, _x.header.sequence, _x.header.idle_time, _x.header.time_status, _x.header.gps_week, _x.header.gps_week_milliseconds, _x.header.receiver_status, _x.header.reserved, _x.header.software_version, _x.week, _x.gpssec))
      _x = self.status
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self
      buff.write(_struct_6i.pack(_x.accz, _x.accy_neg, _x.accx, _x.gyrz, _x.gyry_neg, _x.gyrx))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = novatel_msgs.msg.CommonHeader()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.header.id, _x.header.msg_type, _x.header.port_addr, _x.header.length, _x.header.sequence, _x.header.idle_time, _x.header.time_status, _x.header.gps_week, _x.header.gps_week_milliseconds, _x.header.receiver_status, _x.header.reserved, _x.header.software_version, _x.week, _x.gpssec,) = _struct_H2B2H2BH2I2Hid.unpack(str[start:end])
      start = end
      end += 4
      self.status = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.accz, _x.accy_neg, _x.accx, _x.gyrz, _x.gyry_neg, _x.gyrx,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_H2B2H2BH2I2Hid.pack(_x.header.id, _x.header.msg_type, _x.header.port_addr, _x.header.length, _x.header.sequence, _x.header.idle_time, _x.header.time_status, _x.header.gps_week, _x.header.gps_week_milliseconds, _x.header.receiver_status, _x.header.reserved, _x.header.software_version, _x.week, _x.gpssec))
      _x = self.status
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self
      buff.write(_struct_6i.pack(_x.accz, _x.accy_neg, _x.accx, _x.gyrz, _x.gyry_neg, _x.gyrx))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = novatel_msgs.msg.CommonHeader()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.header.id, _x.header.msg_type, _x.header.port_addr, _x.header.length, _x.header.sequence, _x.header.idle_time, _x.header.time_status, _x.header.gps_week, _x.header.gps_week_milliseconds, _x.header.receiver_status, _x.header.reserved, _x.header.software_version, _x.week, _x.gpssec,) = _struct_H2B2H2BH2I2Hid.unpack(str[start:end])
      start = end
      end += 4
      self.status = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.accz, _x.accy_neg, _x.accx, _x.gyrz, _x.gyry_neg, _x.gyrx,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
_struct_4B = struct.Struct("<4B")
_struct_4s = struct.Struct("<4s")
_struct_H2B2H2BH2I2Hid = struct.Struct("<H2B2H2BH2I2Hid")
